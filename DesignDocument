\documentclass[]{article}
\usepackage{graphicx}
\usepackage{verbatim}
\usepackage{amsthm}
\usepackage{nameref}
\usepackage{mathtools}
\usepackage{enumitem}
\usepackage{algorithmic}
\usepackage{amssymb}
%opening
\title{Password Security\\ CSCE 499 Design Document}
\author{Daniel Case\\ BS CS/Math\\ \\Faculty Advisor: Dr. George Hauser}
\renewcommand{\today}{December 15, 2013}
\begin{document}
\maketitle
\newpage
\tableofcontents
\newpage
\section{Introduction}
\label{sec:Intro}
This project is designed as an academic toolkit for the understanding and implementation of several cryptographic hash functions and password cracking techniques. Outlined below is a brief overview of the functional requirements as mentioned in the Requirements Document.

\subsection{Functional Requirements Overview}
\label{subsec:Functional Requirements Overview}
This program will be a command line application written in ANSI C on a Windows machine. It is designed so that as long as the host machine has a C compiler, the application can be compiled and executed.

The user interface consists of text-driven menus that are displayed on the console upon startup of the program. Standard I/O is used for the input of the user's choices. The user can select an option to input a string of their choice, which acts as a fake password or pass-phrase. The user then chooses how the password is to be hashed via a cryptographic hash function; either SHA-1, SHA-256, or MD5. The input string is then hashed and stored locally in a text-file, pwd.txt.

The user then has three different options for password cracking techniques: Brute-Force Attack, Dictionary Attack, or a Rainbow Table Attack.
\begin{itemize}
\item If a Brute-Force Attack is selected, then the user must input an alphabet or a range of characters for the Brute-Force method to start processing.
\item If a Dictionary Attack is selected, then the user will have an option to load a dictionary file to be processed.
\item If a Rainbow Table Attack is selected, then the user will have an option to load a pre-built Rainbow Table to be processed.
\end{itemize}

Once a method has been selected, the cracking technique will be initialized. Information such as the attack chosen, the range of characters used in the attack, whether or not the attack was successful, and the time it took will be output in a log file, cryptInfo.txt.

More detail about cryptographic hash functions is in the \nameref{subsec:Cryptographic Hash Functions} section under \nameref{sec:Research Review}. Details about implementation of the hash functions and password cracking techniques for this project will be in the \nameref{subsec:Cryptographic Hash Function Imp} and \nameref{subsec:Password Cracking} sections under \nameref{sec:Design}.

\section{Research Review}
\label{sec:Research Review}
\subsection{Cryptographic Hash Functions}
\label{subsec:Cryptographic Hash Functions}
\subsubsection{Hash Function Overview}
\label{subsubsec:Hash Function Overview}
Different operating systems have different ways of implementing password security. In order to be as secure as possible, password management systems within operating systems do not store plaintext passwords. That is to say, the password itself as a string-literal is not stored in a file since a security breach can happen if the password file were to be compromised. Rather, a password is encoded via a cryptographic hash function and then the resulting hash value is stored. For example, in Windows the password is hashed and then stored within the registry using the Windows password management system SAM, short for Security-Accounts Manager. In recent Apple OS and other Unix-like systems, the password is hashed and then a copy of the hash value is stored within a hidden directory called /etc/shadow/password.

A \textit{cryptographic hash function} is an algorithm that maps any input string of arbitrary length into an output bit-string of a fixed length, called the hash value. Typically the input string that is chosen to be encoded is referred to as the \textit{input} or \textit{message} whereas the output hash value is called the \textit{hash} or \textit{digest}.

A \textit{cryptographic hash function} has three special properties:
\begin{enumerate}
\item \label{itm:first} Given a hash \textit{h}, it should be infeasible to find any message \textit{m} such that \textit{h}$=$\textit{hash}($m$). This is called \textit{preimage resistance}.
\item \label{itm:second} Given an input  \textit{$m_1$}, it should be infeasible to find another input \textit{$m_2$}, such that \textit{$m_1$} $\neq$ \textit{$m_2$} and \textit{hash}($m_1$) $=$ \textit{hash}($m_2$). This is referred to as \textit{second-preimage resistance}.
\item \label{itm:third} It is infeasible to find two different messages, \textit{$m_1$} and \textit{$m_2$} such that \textit{hash}($m_1$) $=$ \textit{hash}($m_2$). This is also referred to as \textit{collision resistance}.

\textbf{Corollary:} \textit{Collision resistance implies second-preimage resistance but does not guarantee preimage resistance}.
\end{enumerate}

These properties are required for the hash function to be considered \textit{cryptographically secure}. What it means to be cryptographically secure is directly related to whether or not an operation is considered infeasible. Feasibility has to do with the computational complexity of the action being performed. In a cryptographic sense, an action that is infeasible means that it is almost certainly beyond the reach of any adversary who must be prevented from breaking the system. It also means in a mathematical sense that the action cannot be fulfilled in asymptotic polynomial time. Meaning, for a cryptographic hash function with a digest length of \textit{n}-bits, finding a message that corresponds to a given digest can always be done in at most $2^\textit{n}$ evaluations. Therefore it has a time complexity of $\mathcal{O}$($2^\textit{n}$). Hence for hashes with relatively larger digest lengths it would be considered infeasible to generate all password combinations.

\subsection{Cryptographic Pseudo Random Number Generator}
\label{subsubsec:CSPRNG}
A \textit{cryptographic pseudo random number generator}, or as it is most commonly called, a \textit{CSPRNG}, is an algorithm for generating a cryptographically secure sequence of numbers that approximates the properties of random numbers. This sequence of numbers is not truly random since the sequence is determined by a small set of values called the \textit{state} and by an initial value called a \textit{seed}. Each number thereafter is calculated using the current state and seed.

The initial seed is a number chosen by combining some of the values in memory of keyboard typings, mouse movement, and disc activities. This value is then hashed via a cryptographic hash function to generate the next number in the CSPRNG. After a set amount of iterations, a new seed is generated and then hashed to continue the sequence.

A CSPRNG must satisfy two requirements in order to be considered cryptographically secure:
\begin{enumerate}
\item A CSPRNG should satisfy the \textit{next-bit test}. That is, given the first \textit{k} bits of the sequence, it is infeasible to predict the (\textit{k+1})\textsuperscript{th} bit with probability greater than 50 percent.
\item A CSPRNG should withstand \textit{state compromise extensions.} That is, in the event that part or all of its state has been revealed, it is infeasible to reconstruct the sequence prior to revelation.
\end{enumerate}

\subsubsection{Salts}
\label{subsubsec:Salts}
A \textit{salt} is a random set of bytes of fixed length that is used as additional input for a cryptographic hash function. Usually the salt is generated by choosing a number made by a CSPRNG, and then hashing the value. The salt and password are then concatenated into a new input string and processed by a cryptographic hash function. The resulting hash is then stored with the salt in a table or file.

Salts are used to increase the difficulty and cost of precomputed attacks, such as the use of Rainbow Tables. If the salt is stored separately from the hash, then the effectiveness of Dictionary Attacks is also reduced.
\begin{comment} 
For more information regarding the usage of salts versus the feasibility of password cracking, see the \nameref{subsubsec:Feasibility} section.
\end{comment}

\subsection{Cryptographic Hash Function Weaknesses}
\label{subsec:Weakness}
The \nameref{subsubsec:Collisions and Pigeon Hole} and \nameref{subsubsec:Birthday} sections refer to mathematical principles that effect the security of cryptographic hash functions. For this project, the principles that are mentioned do not directly effect the password cracking techniques but are instead reasons for choosing SHA-1, SHA-256, and MD5. For more information, see the \nameref{subsec:Choose} section.

\subsubsection{Collisions and the Pigeon Hole Principle}
\label{subsubsec:Collisions and Pigeon Hole}
The properties of a cryptographic hash function imply that a malicious adversary cannot replace or modify the input string without changing the hash. Therefore if two strings have the same hash it can be ascertained with high probability that the input strings are identical, unless there is a collision. A \textit{hash collision} is a situation where two distinct pieces of data have the same hash value. This can happen whenever values of a large set are mapped to relatively shorter bit-strings. Property \ref{itm:third} does not mean that two different input strings cannot produce the same hash, merely that it is computationally hard to do so. However due to the \textit{Pigeon Hole Principle}, for any cryptographic hash function there exists a collision after a certain number of computations. (For the exact number of computations required for a collision, refer to \nameref{subsubsec:Birthday} section.)

The \textit{Pigeon Hole Principle} states that:
\DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
\newtheorem*{mydef}{}
\begin{mydef}
If n discrete objects are to be allocated to m containers, then at least one container must hold no fewer than $\ceil*{n/m}$ objects.
\end{mydef}
We also have the following \textit{Pigeon Hole Corollary}:
\begin{mydef}
If n $>$ m keys are hashed into m slots, then two keys will collide.
\end{mydef}
Each cryptographic hash function will produce a fixed \textit{m} bits of output from \textit{n} bits of input, however \textit{n}$>$\textit{m} since the input is the set of all words possible for a password and the resultant hash is a fixed-length bit-string.
In terms of hash collisions this means that for a finite amount of input strings being encoded into another finite amount of hash values then there will always be at least one hash value that can be generated from two different input strings.

\subsubsection{The Birthday Paradox}
\label{subsubsec:Birthday}
The \textit{Birthday Paradox} is a generalized probability concept based on the Pigeon Hole Principle. It concerns the probability that, in a set of \textit{n} randomly chosen people, some pair of them will have the same birthday. In the context of hash functions, the formula in its generalized form creates an upper bound on the number of times a hash function can be computed before a collision is found. The formula and general rule can be stated as:
\begin{mydef}
If a hash function produces n-bits of output, then $\sqrt{2^n}(2^{n/2})$ hash operations will produce a collision.
\end{mydef}
This general case of \nameref{subsubsec:Birthday} leads to consequences in terms of cryptographic security. Another metric for whether or not a hash function is cryptographically secure is to test when a collision occurs after a number of hash operations. If a collision happens in a number of operations less than specified by \nameref{subsubsec:Birthday} then the hash function is deemed to be insecure and cryptographically flawed.

\subsection{Why Choose SHA-1, SHA-256, and MD5?}
\label{subsec:Choose}
Various forms of cryptographic hash functions exist, and in terms of this project three specific ones have been selected: SHA-1, SHA-256, and MD5. These particular cryptographic hash functions were chosen because of their widespread use in website authentication, their ease of access in terms of publicized code and documentation, and as well as their documented security flaws and known attacks against them. 

These cryptographic hash functions have been deemed not as secure as their more modern updates, and the security flaws that exist make the password cracking techniques chosen for this project a little more feasible. For example, MD5, SHA-1, and SHA-256 do not automatically employ the use of salts. Hence a Rainbow Table can be constructed and used against them. MD5, SHA-1, and SHA-256 all have been proven to have collisions occur in less than the limit imposed by \nameref{subsubsec:Birthday}. 

For a Brute-Force Attack, evaluating a cryptographic hash function with an \textit{n}-bit digest can take a maximum of $2^\textit{n}$ evaluations to search through all password combinations. If the length of the string and the types of characters used in the charset is known, then the number of password combinations to be generated and tested is much lower and is bounded above by \nameref{subsubsec:Birthday}. For more information, see the \nameref{subsubsec:Brute-Force} section.

\section{Design Methodology}
\label{sec:Design}
\subsection{Cryptographic Hash Function Implementation}
\label{subsec:Cryptographic Hash Function Imp}
All three cryptographic hash functions in this project use a different combination of bit-wise logical operations. In this case, the circular shifts (rotate no-carry): \textit{left-rotate} and \textit{right-rotate}, or (since the integers are unsigned) logical shifts: \textit{left-shift} and \textit{right-shift}. The following are the respective function definitions in pseudocode. \textbf{Note:} The $<<$ and $>>$ symbols specifically refer to the bitwise operation, the logical shift, in C. That is, x $<<$ n is obtained by discarding the left-most \textit{n} bits of the word \textit{x} and then padding the result with \textit{n} zeros on the right. Similarly, x $>>$ n is obtained by discarding the right-most bits of the word \textit{n} of the word \textit{x} and padding the result with \textit{n} zeros on the left.
\vspace*{1\baselineskip}
\begin{algorithmic}
\STATE \textit{//Left-rotate function definition:}
\STATE \textbf{leftrotate} (x, c)
\RETURN (x $<<$ c) \OR (x $>>$ (32 - c));
\vspace*{1\baselineskip}
\STATE \textit{//Right-rotate function definition:}
\STATE \textbf{rightrotate} (x, c)
\RETURN (x $>>$ c) \OR (x $<<$ (32 - c));
\vspace*{1\baselineskip}
\STATE \textit{//Left-shift function defintion:}
\STATE \textbf{leftshift} (x, c)
\RETURN (x $<<$ c);
\vspace*{1\baselineskip}
\STATE \textit{//Right-shift function definition:}
\STATE \textbf{rightshift} (x, c)
\RETURN (x $>>$ c);
\end{algorithmic}

\subsubsection{SHA-1}
\label{subsubsec:SHA-1}
SHA-1 produces a 160-bit digest. This section details the pseudocode used in its implementation.
\begin{enumerate}
\item All variables are 32-bit unsigned integers, except for \textit{ml}, the message length, which is appended as a 64-bit integer (bit-string), and the message digest, \textit{hh}, which is 160-bits. \item All variables and constants seen in the pseudocode are in big-endian. That is, the most significant byte is stored in the leftmost byte position.
\item The four constants, \textit{k}, in the for loop is the number $2^{30}$ multiplied by $\sqrt{2}$, $\sqrt{3}$, $\sqrt{5}$, and $\sqrt{10}$ respectively.
\item The five initialized variables, \textit{h}0 through \textit{h}4, when converted into little-endian, are the following hexadecimal values:
\begin{itemize}[noitemsep,nolistsep]
\item[] h0: 0x01234567
\item[] h1: 0x89ABCDEF
\item[] h2: 0xFEDCBA98
\item[] h3: 0x76543210
\item[] h4: 0xF0E1D2C3
\end{itemize}
\end{enumerate}

\begin{algorithmic}
\STATE \textbf{Pseudocode:}
\vspace*{1\baselineskip}
\STATE \textit{//Initialize hash variables:}
\STATE h0 = 0x67452301
\STATE h1 = 0xEFCDAB89
\STATE h2 = 0x98BADCFE
\STATE h3 = 0x10325476
\STATE h4 = 0xC3D2E1F0
\vspace*{1\baselineskip}
\STATE ml = message length in bits
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: adding a single 1 bit:}
\STATE \textbf{append} "1" bit \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: padding with zeros}
\STATE \textbf{append} "0" bit \textbf{until} ml $\equiv 448 \mod{512}$
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: append ml as a 64-bit big-endian integer to message}
\STATE \textbf{append} ml mod (2 \textbf{pow} 64) \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Process the message in successive 512-bit chunks:}
\FOR{each 512-bit chunk of message}
\STATE create an eighty-entry \textit{message schedule array}, w[i], $0 \leq i \leq 79$, of 32-bit big-endian words \textit{//words in array are initialized to 0}
\vspace*{1\baselineskip}
\STATE copy chunk into first sixteen words of message schedule array, w[0...15]
\vspace*{1\baselineskip}

\STATE \textit{//Extend the sixteen words into the remaining sixty-four words,} w[16...79]\textit{, of the message schedule array:}
\FOR{$i = 16$ \TO $79$}
\STATE w[i] = (w[i-3] \XOR w[i-8] \XOR w[i-14] \XOR w[i-16]) \textbf{leftrotate} 1
\ENDFOR

\vspace*{1\baselineskip}
\STATE \textit{//Initialize hash values for this chunk:}
\STATE a = h0
\STATE b = h1
\STATE c = h2
\STATE d = h3
\STATE e = h4

\vspace*{1\baselineskip}
\STATE \textit{//Main Loop} (\textit{Compression function})\textit{:}
\FOR{$i = 0$ \TO $79$}
\IF{$0 \leq i \leq 19$}
\STATE f = (b \AND c) \OR ((\NOT b) \AND d)
\STATE k = 0x5A827999
\ELSIF{$20 \leq i \leq 39$}
\STATE f = b \XOR c \XOR d
\STATE k = 0x6ED9EBA1
\ELSIF{$40 \leq i \leq 59$}
\STATE f = (b \AND c) \OR (b \AND d) \OR (c \AND d)
\STATE k = 0x8F1BBCDC
\ELSIF{$60 \leq i \leq 79$}
\STATE f = b \XOR c \XOR d
\STATE k = 0xCA62C1D6
\ENDIF
\vspace*{1\baselineskip}
\STATE temp = (a \textbf{leftrotate} 5) + f + e + k + w[i]
\STATE e = d
\STATE d = c
\STATE c = b \textbf{leftrotate} 30
\STATE b = a
\STATE a = temp
\ENDFOR

\vspace*{1\baselineskip}
\STATE \textit{//Add the compressed chunk to the current hash value:}
\STATE h0 = h0 + a
\STATE h1 = h1 + b 
\STATE h2 = h2 + c
\STATE h3 = h3 + d
\STATE h4 = h4 + e
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Produce the final hash value }(\textit{big-endian})\textit{:}

hh = (h0 \textbf{leftshift} 128) \OR (h1 \textbf{leftshift} 96) \OR (h2 \textbf{leftshift} 64) \OR (h3 \textbf{leftshift} 32) \OR h4
\end{algorithmic}
\qedsymbol

\subsubsection{SHA-256}
\label{subsubsec:SHA-256}
SHA-256 produces a 256-bit digest. This section details the pseudocode used in its implementation.
\begin{enumerate}
\item All variables are 32-bit unsigned integers, except the message length, \textit{ml}, which is appended as a 64-bit integer (bit-string), and the message digest, \textit{hh}, is 256-bits.
\item For each round of the loop, there is one round constant k[i], and one entry in the message schedule array w[i], where $0 \leq i \leq 63$
\item The main loop uses eight variables, \textit{a} through \textit{h}.
\item All variables and constants are in big-endian. The initialized constants, \textit{h}0 through \textit{h}7, are the first 32-bits of the fractional parts of the square roots of the first eight primes: 2...19. The round constants, \textit{k}[0...63], are the first 32-bits of the fractional parts of the cube roots of the first sixty-four primes: 2...311.
\end{enumerate}

\begin{algorithmic}
\STATE \textbf{Pseudocode:}
\vspace*{1\baselineskip}
\STATE \textit{//Initialize hash variables:}
\STATE h0 = 0x6A09E667
\STATE h1 = 0xBB67AE85
\STATE h2 = 0x3C6EF372
\STATE h3 = 0xA54FF53A
\STATE h4 = 0x510E527F
\STATE h5 = 0x9B05688C
\STATE h6 = 0x1F83D9AB
\STATE h7 = 0x5BE0CD19
\vspace*{1\baselineskip}
\STATE ml = message length in bits

\vspace*{1\baselineskip}
\STATE \textit{//Initialize array of round constants, k}[i], $0 \leq i \leq 63$
\STATE k[0...63] = 
\STATE 0x428A2F98
\STATE 0x71374491
\STATE 0xB5C0fBCF
\STATE 0xE9B5DBA5
\STATE 0x3956C25B
\STATE 0x59F111F1
\STATE 0x923F82A4
\STATE 0xAB1C5ED5
\STATE ...
\STATE  0xC67178F2

\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: adding a single 1 bit}
\STATE \textbf{append} "1" bit \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: padding with zeros}
\STATE \textbf{append} "0" bit \textbf{until} ml $\equiv 448 \mod{512}$
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: append ml as a 64-bit big-endian integer to message}
\STATE \textbf{append} ml mod (2 \textbf{pow} 64) \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Process the message in successive 512-bit chunks:}
\FOR{each 512-bit chunk of message}
\STATE create a 64-entry \textit{message schedule array}, w[i], $0 \leq i \leq 63$, of 32-bit big-endian words \textit{//words in the array are initialized to 0}
\vspace*{1\baselineskip}
\STATE copy chunk into first sixteen words, w[0...15], of the message schedule array

\vspace*{1\baselineskip}
\STATE \textit{//Extend the sixteen words into the remaining forty-eight words, }w[16...63], \textit{of the message schedule array:}
\FOR{$i = 16$ \TO $63$}
\STATE s0 = (w[i-15] \textbf{rightrotate 7}) \XOR (w[i-15] \textbf{rightrotate} 18) \XOR (w[i-15] \textbf{rightshift} 3)
\STATE s1 = (w[i-2] \textbf{rightrotate} 17) \XOR (w[i-2] \textbf{rightrotate} 19) \XOR (w[i-2] \textbf{rightshift} 10)
\STATE w[i] = w[i-16] + s0 + w[i-7] + s1
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Initialize hash values for this chunk:}
\STATE a = h0
\STATE b = h1
\STATE c = h2
\STATE d = h3
\STATE e = h4
\STATE f = h5
\STATE g = h6
\STATE h = h7
\vspace*{1\baselineskip}
\STATE \textit{//Main loop }(\textit{Compression function})\textit{:}
\FOR{$i = 0$ \TO $63$}
\STATE S1 = (e \textbf{rightrotate} 6) \XOR (e \textbf{rightrotate} 11) \XOR (e \textbf{rightrotate} 25)
\STATE ch = (e \AND f) \XOR ((\NOT e) \AND g)
\STATE temp1 = h + S1 + ch + k[i] + w[i]
\STATE S0 = (a \textbf{rightrotate} 2) \XOR (a \textbf{rightrotate} 13) \XOR (a \textbf{rightrotate} 22)
\STATE maj = (a \AND b) \XOR (a \AND c) \XOR (b \AND c)
\STATE temp2 = S0 + maj
\STATE h = g
\STATE g = f
\STATE f = e
\STATE e = d + temp1
\STATE d = c
\STATE c = b
\STATE b = a
\STATE a = temp1 + temp2
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Add the compressed chunk to the current hash value:}
\STATE h0 = h0 + a
\STATE h1 = h1 + b
\STATE h2 = h2 + c
\STATE h3 = h3 + d
\STATE h4 = h4 + e
\STATE h5 = h5 + f
\STATE h6 = h6 + g
\STATE h7 = h7 + h
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Produce the final hash value }(\textit{big-endian})\textit{:}
\STATE hh = h0 \textbf{append} h1 \textbf{append} h2 \textbf{append} h3 \textbf{append} h4 \textbf{append} h5 \textbf{append} h6 \textbf{append} h7
\end{algorithmic}
\qedsymbol

\subsubsection{MD5}
\label{subsubsec:MD5}
MD5 produces a 128-bit digest. This section details the pseudocode used in its implementation.
\begin{enumerate}
\item All variables and constatns are in little-endian.
\item All variables and constatns are 32-bit unsigned integers except for the message length, \textit{ml}, which is appended as a 64-bit integer (bit-string), and the final hash value, \textit{hh}, which is 128-bits.
\item The round constants, \textit{k}[i], $0 \leq i \leq 63$, are binary representations of the integer part of the sines of integers (in radians).
\end{enumerate}

\begin{algorithmic}
\STATE \textbf{Pseudocode:}
\vspace*{1\baselineskip}
\STATE \textit{//Initialize arrays for round constants, k, and round-shifts, s:}
\STATE int[64] s, k
\vspace*{1\baselineskip}
\STATE \textit{//Array s specifies the per-round shift amounts:}
\STATE s[0...15] = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22]
\STATE s[16..31] = [5, 9, 14, 20, 5, 9, 14, 20,  5, 9, 14, 20, 5, 9, 14, 20]
\STATE s[32..47] = [4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23]
\STATE s[48..63] = [6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
\vspace*{1\baselineskip}
\STATE \textit{//Use binary integer part of the sines of integers:}
\FOR{$i = 0$ \TO $63$}
\STATE k[i] = $\lfloor|{\sin(i +1)}|(2 \textbf{ pow } 32) \rfloor$
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Initialize hash variables:}
\STATE a0 = 0x67452301
\STATE b0 = 0xEFCDAB89  
\STATE c0 = 0x98ABCDFE 
\STATE d0 = 0x10325476
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: adding a single 1 bit}
\STATE \textbf{append} "1" bit \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: padding with zeros}
\STATE \textbf{append} "0" bit \textbf{until} ml $\equiv 448 \mod{512}$
\vspace*{1\baselineskip}
\STATE \textit{//Pre-processing: append ml as a 64-bit big-endian integer to message}
\STATE \textbf{append} ml mod (2 \textbf{pow} 64) \TO message
\vspace*{1\baselineskip}
\STATE \textit{//Process the message in successive 512-bit chunks:}
\FOR{each 512-bit chunk of message}
\STATE break chunk into sixteen 32-bit chunks, M[i], $0 \leq i \leq 15$
\STATE \textit{//Initialize hash value for this chunk:}
\STATE A = a0
\STATE B = b0
\STATE C = c0
\STATE D = d0
\vspace*{1\baselineskip}
\STATE \textit{Main loop }(\textit{Compression function}\textit{:})
\FOR{$i = 0$ \TO $63$}
\IF{$0 \leq i \leq 15$}
\STATE F = (B \AND C) \OR ((\NOT B) \AND D)
\STATE g = i
\ELSIF{$16 \leq i \leq 31$}
\STATE F = (D \AND B) \OR ((\NOT D) \AND C)
\STATE g = (5*i + 1) \textbf{mod} 16
\ELSIF{$32 \leq i \leq 47$}
\STATE F = B \XOR C \XOR D
\STATE g = (3*i + 5) \textbf{mod} 16
\ELSIF{$48 \leq i \leq 63$}
\STATE F = C \XOR (B \OR(\NOT D))
\STATE g = (7*i) \textbf{mod} 16 
\ENDIF
\vspace*{1\baselineskip}
\STATE dTemp = D
\STATE D = C
\STATE C = B
\STATE B = B + \textbf{leftrotate}((A + F + k[i] + M[g]), s[i])
\STATE A = dTemp
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Add this chunk's hash to the result:}
\STATE a0 = a0 + A
\STATE b0 = bo + B
\STATE c0 = c0 + C
\STATE d0 = d0 + D
\ENDFOR
\vspace*{1\baselineskip}
\STATE \textit{//Produce the final hash value }(\textit{little-endian})\textit{:}
\STATE hh = a0 \textbf{append} b0 \textbf{append} c0 \textbf{append} d0
\end{algorithmic}
\qedsymbol

\subsection{Password Cracking Implementation}
\label{subsec:Password Cracking}
\subsubsection{Preimage Attacks}
\label{subsubsec:preimage}
There are various types of cryptographic attacks, however the password cracking techniques in this project are all related to a kind of \textit{preimage attack}. This is an attack where if given the password hash, \textit{h}, an attempt is made to compromise the password by generating a string, \textit{m}, and then comparing \textit{hash}(\textit{m}) to \textit{h}.

\subsubsection{Brute-Force}
\label{subsubsec:Brute-Force}
As implied in the \nameref{subsubsec:Hash Function Overview} and \nameref{subsec:Choose} sections, a Brute-Force Attack attempts to "guess" a password by generating a set of messages or message combinations that hash to the same hash value as the stored password. It has a time complexity of $\mathcal{O}$($2^\textit{n}$), where \textit{n} is the length of the digest produced by the cryptographic hash function. However, the number of evaluations is strictly bounded above by $2^\textit{n}$ if no information is given about the password. This is because of the nature of generating subsets; if no information is given about a password, then it can be assumed that one may have to search the entirety of the keyspace. If the length of the password is known, and the types of characters used in the charset is also known, then the number of combinations to try is determined by $\textit{numCharset}^\textit{length}$. And this number is bounded above by \nameref{subsubsec:Birthday}.

The Brute-Force Attack requires an \textit{alphabet} and a character length to start. An alphabet is a range of characters, numerals, and special characters that the user will provide via console input. The attack, in an asynchronous while loop, will generate password guesses based on the alphabet and the character length provided. Each string created will be used as input for the chosen hashing algorithm, and the output hash value will be compared to the password hash. If the hashes match, the attack is successful and the method is halted.

\subsubsection{Dictionary}
\label{subsubsec:Dictionary}
A Dictionary Attack is similar to a Brute-Force Attack, except that it does not need to generate strings for password guesses. Instead, the user will provide the name of a text file, dict.txt, that is a large, prebuilt list of words. Similar in concept to a dictionary. The entries in this word-list are then hashed using the chosen cryptographic hash function, and the hashes are compared to the given password hash. Like the Brute-Force method, if the hashes match then the attack is successful and the method is halted.

\subsubsection{Rainbow Table}
\label{subsubsec:Rainbow Table}
A Rainbow Table is constructed using a word-list, where each entry is stored alongside a hashed value. The core ideal behind the construction of a Rainbow Table is the use of \textit{reduction functions}, and the storage of \textit{hash chains}.

A reduction function is a method that maps a hashed value into a possible password guess, or as it is sometimes called, \textit{plaintext}. To start with, a password guess is chosen and hashed. And then that hash value is used as input into a reduction function to get another valid plaintext. This new plaintext string is then hashed, and the new hashed value is then fed into another reduction function to produce another plaintext. This is done an arbitrary number of times, depending on how many reduction functions are defined and used. The entry that is stored in the Rainbow Table is a pair of values, the original password guess and the final hash value generated from hashing plaintext made by \textit{n} reduction functions. This process is called a hash chain, and is essential to the time/space tradeoff that the Rainbow Table provides.

This is a general view of how the algorithm works for processing the pairs in a Rainbow Table. That is, how to evaluate the hash chains to determine if a listed password in the word-list is the actual password used.
\vspace*{1\baselineskip}

\textbf{Pseudocode:}
\begin{enumerate}
\item Find the hashed value in the lookup table. If it is found, goto step 5. If not:
\item Starting with the last reduction function, "reduce" the hashed value to get a new plaintext. (Every time Step 1 is repeated, go to the next lowest reduction function.)
\item Hash the new plaintext and repeat step 1 from the beginning with the new hash value.
\item Take the plaintext value and hash it.
\item If the hash matches the given password hash:
\item The attack is successful. The plaintext that was hashed was the password plaintext.
\item If not, apply the reduction function to get a new plaintext value, and then goto step 2.

\end{enumerate}



%\subsection{Console Application Implementation}
%\label{subsec:Console}
%\subsubsection{User Interface}
%\label{subsubsec:UI}

%\subsection{Testing}
%\label{subsec:Testing}

%\subsubsection{Password Cracking Feasibility}
%\label{subsubsec:Feasibility}
%Here you are going to talk about salts and why they slow down the use of dictionary and rainbow table attacks
%Then, talk about the primary problem of password cracking feasibility: this project is not going to be optimized for use of GPU's, only CPU's, hence the amount of passwords that can be checked via brute-force and dictionary is slower than using GPU's. Also the look-up cost for a rainbow table is reduced as well. On the upside, you could mention how easy it is to get pre-computed Rainbow tables for MD5, SHA-1, and even SHA-256. No one is really safe, that is the point.

\section{References}
\label{sec:References}

\begin{enumerate}
	\item "Brute Force Password Cracker": Montero, Massimiliano (2009) Oxid.it 
	\item "Password Cracking": wikipedia.org\textbackslash wiki\textbackslash Password\textunderscore cracking 
	\item "John the Ripper Benchmarks": openwall.info (2010-03-30) 
	\item "Password Memorability and Security": Yan J, Blackwell A, Anderson R, Grant A (2004) IEEE Security and Privacy Magazine Vol. 2 
	\item "SHA-1 Source Code in C": (2010) polarssl.org\textbackslash sha-1-source-code 
	\item "MD5 (RSA-Free) Library" (2002) sourceforge.net\textbackslash projects \textbackslash libmd5-rfc 
	\item "Password Manager": wikipedia.org\textbackslash wiki\textbackslash Password\textunderscore manager 
	\item "Hash Functions": Dan Berstein (2003) cse.yorku.ca
	\item "Rainbow Tables": wikipedia.org\textbackslash wiki\textbackslash Rainbow\textunderscore table
	\item "Rainbow Tables and Reduction Functions": stitchintime.wordpress.com: Paul Faulstich
	\item "The Birthday Problem": Eric Weisstein: Wolfram Mathworld
	\item "SHA-1/SHA-256 Standard" FIP-180 Publication, United States Government, csrc.nist.gov
\end{enumerate}


\end{document}


